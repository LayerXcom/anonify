/* automatically generated by rust-bindgen */

#![allow(dead_code)]
use anonify_types::*;
use sgx_types::*;

extern "C" {
    pub fn ecall_entry_point(
        eid: sgx_enclave_id_t,
        retval: *mut u32,
        cmd: u32,
        in_buf: *mut u8,
        in_len: usize,
        out_buf: *mut u8,
        out_maxlen: usize,
        real_out_len: *mut usize,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_insert_ciphertext(
        eid: sgx_enclave_id_t,
        retval: *mut EnclaveStatus,
        ciphertexts: *mut u8,
        ciphertexts_len: usize,
        enclave_kv: *mut RawUpdatedState,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_insert_handshake(
        eid: sgx_enclave_id_t,
        retval: *mut EnclaveStatus,
        handshake: *mut u8,
        handshake_len: usize,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_get_state(
        eid: sgx_enclave_id_t,
        retval: *mut EnclaveStatus,
        sig: *mut [u8; 64usize],
        pubkey: *mut [u8; 32usize],
        challenge: *mut [u8; 32usize],
        mem_id: u32,
        state: *mut EnclaveState,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_join_group(
        eid: sgx_enclave_id_t,
        retval: *mut EnclaveStatus,
        result: *mut RawJoinGroupTx,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_handshake(
        eid: sgx_enclave_id_t,
        retval: *mut EnclaveStatus,
        result: *mut RawHandshakeTx,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_register_notification(
        eid: sgx_enclave_id_t,
        retval: *mut EnclaveStatus,
        sig: *mut [u8; 64usize],
        pubkey: *mut [u8; 32usize],
        challenge: *mut [u8; 32usize],
    ) -> sgx_status_t;
}
