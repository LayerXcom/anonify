pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;

import "./ReportHandle.sol";
import "./utils/Secp256k1.sol";

// Consider: Avoid inheritting
contract Anonify is ReportHandle {
    address private _owner;
    uint256 private _mrenclaveVer;

    event StoreCiphertext(bytes ciphertext);
    event StoreHandshake(bytes handshake);
    event UpdateMrenclaveVer(uint256 newVersion);

    constructor(
        bytes memory _report,
        bytes memory _reportSig,
        bytes memory _handshake,
        uint256 mrenclaveVer
    ) ReportHandle(_report, _reportSig) public {
        _owner = msg.sender;
        _mrenclaveVer = mrenclaveVer;
        handshake_wo_sig(_handshake);
     }

    modifier onlyOwner() {
        require(_owner == msg.sender, "caller is not the owner");
        _;
    }

    // a new TEE participant joins the group.
    function joinGroup(
        bytes memory _report,
        bytes memory _reportSig,
        bytes memory _handshake,
        uint256 _version
    ) public {
        require(_mrenclaveVer == _version, "Must be same version");
        handleReport(_report, _reportSig);
        handshake_wo_sig(_handshake);
    }

    function updateMrenclave(
        bytes memory _report,
        bytes memory _reportSig,
        bytes memory _handshake,
        uint256 _newVersion
    ) public onlyOwner {
        require(_mrenclaveVer != _newVersion, "Must be new version");
        updateMrenclaveInner(_report, _reportSig);
        handshake_wo_sig(_handshake);
        _mrenclaveVer = _newVersion;
        emit UpdateMrenclaveVer(_newVersion);
    }

    // Store ciphertexts which is generated by trusted environment.
    function storeInstruction(
        bytes memory _newCiphertext,
        bytes memory _enclaveSig
    ) public {
        address verifyingKey = Secp256k1.recover(sha256(_newCiphertext), _enclaveSig);
        require(verifyingKeyMapping[verifyingKey] == verifyingKey, "Invalid enclave signature.");

        emit StoreCiphertext(_newCiphertext);
    }

    function handshake(
        bytes memory _handshake,
        bytes memory _enclaveSig
    ) public {
        address verifyingKey = Secp256k1.recover(sha256(_handshake), _enclaveSig);
        require(verifyingKeyMapping[verifyingKey] == verifyingKey, "Invalid enclave signature.");

        emit StoreHandshake(_handshake);
    }

    function handshake_wo_sig(bytes memory _handshake) private {
        emit StoreHandshake(_handshake);
    }
}
