trigger:
  - master

stages:
  - stage:
#    condition: eq(variables['Build.SourceBranch'], 'feature/e2e-test1')
    jobs:
      - job: E2E
        pool:
          name: 'AnonifyAgent'
        steps:
          - script: |
              echo 'hello E2E test'
              echo $(variables['Build.SourceBranch'])
              echo $(variables['Build.SourceBranchName'])
              echo $(variables['SourceBranchName'])
              sleep 30
            displayName: 'Run E2E tests'

#- stage: Test
#  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
#  jobs:
#  - job: CI
#    pool:
#      name: 'AnonifyAgent'
#    steps:
#    - script: |
#        cp .env.sample .env
#        export SPID=$(SPID)
#        export SUB_KEY=$(SUB_KEY)
#        docker-compose up -d
#        docker-compose exec -T sgx_machine bash -c "cd anonify && ./scripts/test.sh"
#      displayName: 'Run tests'
#    - script: docker-compose down
#      condition: always()
#      displayName: 'Shutdown'
#
#- stage: Docker_Build_and_Push
#  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
#  jobs:
#  - job: Docker
#    pool:
#      name: 'AnonifyAgent'
#    steps:
#    - task: Docker@2
#      displayName: Build erc20 image
#      inputs:
#        command: build
#        containerRegistry: anonify-ci-cd-acr
#        repository: erc20-state-runtime
#        tags: latest
#        dockerfile: ./docker/erc20.Dockerfile
#        buildContext: .
#        arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
#    - task: Docker@2
#      displayName: Push erc20 image
#      inputs:
#        command: push
#        containerRegistry: anonify-ci-cd-acr
#        repository: erc20-state-runtime
#        tags: latest
#        dockerfile: ./docker/erc20.Dockerfile
#        buildContext: .
#    - task: Docker@2
#      displayName: Build key-vault for erc20 image
#      inputs:
#        command: build
#        containerRegistry: anonify-ci-cd-acr
#        repository: key-vault-for-erc20
#        tags: latest
#        dockerfile: ./docker/keyvault.Dockerfile
#        buildContext: .
#        arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
#    - task: Docker@2
#      displayName: Push key-vault for erc20 image
#      inputs:
#        command: push
#        containerRegistry: anonify-ci-cd-acr
#        repository: key-vault-for-erc20
#        tags: latest
#        dockerfile: ./docker/keyvault.Dockerfile
#        buildContext: .
#    - script: docker image prune -f
#      displayName: Remove dangling images
