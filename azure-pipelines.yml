trigger:
- main

stages:
# - stage: Test
#   condition: ne(variables['Build.SourceBranch'], 'refs/heads/main')
#   jobs:
#     - job: CI
#       pool:
#         name: 'AnonifyAgent'
#       steps:
#         - script: |
#             cp .env.sample .env
#             export SPID=$(SPID)
#             export SUB_KEY=$(SUB_KEY)
#             docker-compose up -d
#             docker-compose exec -T sgx_machine bash -c "sudo chown -R anonify-dev:anonify-dev anonify ; cd anonify && ./scripts/test.sh"
#           displayName: 'Run tests'
#         - script: docker-compose down
#           condition: always()
#           displayName: 'Shutdown'

# - stage:
#   condition: contains(variables['System.PullRequest.SourceBranch'], 'e2e')
#   jobs:
#   - job: E2E
#     pool:
#       name: 'AnonifyAgent'
#     steps:
#       - task: Docker@2
#         displayName: Build erc20 image
#         inputs:
#           command: build
#           containerRegistry: anonify-ci-cd-acr
#           repository: erc20-state-runtime
#           tags: latest
#           dockerfile: ./docker/erc20.Dockerfile
#           buildContext: .
#           arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
#       - task: Docker@2
#         displayName: Build key-vault for erc20 image
#         inputs:
#           command: build
#           containerRegistry: anonify-ci-cd-acr
#           repository: key-vault-for-erc20
#           tags: latest
#           dockerfile: ./docker/keyvault.Dockerfile
#           buildContext: .
#           arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
#       - script: |
#           export SPID=$(SPID)
#           export SUB_KEY=$(SUB_KEY)
#           ./scripts/e2e-test.sh
#         displayName: 'Run E2E tests'
#       - script: docker image prune -f
#         displayName: Remove dangling images
#       - script: docker-compose -f e2e-docker-compose.yml down
#         condition: always()
#         displayName: 'Shutdown'

- stage: Build_and_Push_Base_Docker_Images
  # condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - job: Docker
    pool:
      name: 'AnonifyAgent'
    steps:
#     - task: Docker@2
#       displayName: Build rust-sgx-sdk-rootless image
#       inputs:
#         command: build
#         containerRegistry: anonify-ci-cd-acr
#         repository: rust-sgx-sdk-rootless
#         tags: latest-test
#         dockerfile: ./docker/base-rust-sgx-sdk-rootless.Dockerfile
#         buildContext: .
#     - task: Docker@2
#       displayName: Push rust-sgx-sdk-rootless image
#       inputs:
#         command: push
#         containerRegistry: anonify-ci-cd-acr
#         repository: rust-sgx-sdk-rootless
#         tags: latest-test
#         dockerfile: ./docker/base-rust-sgx-sdk-rootless.Dockerfile
#         buildContext: .

#     - task: Docker@2
#       displayName: Build anonify-dev image
#       inputs:
#         command: build
#         containerRegistry: anonify-ci-cd-acr
#         repository: anonify-dev
#         tags: latest-test
#         dockerfile: ./docker/base-anonify-dev.Dockerfile
#         buildContext: .
#     - task: Docker@2
#       displayName: Push anonify-dev image
#       inputs:
#         command: push
#         containerRegistry: anonify-ci-cd-acr
#         repository: anonify-dev
#         tags: latest-test
#         dockerfile: ./docker/base-anonify-dev.Dockerfile
#         buildContext: .

    - task: Docker@2
      displayName: Build anonify-dev-pgx image
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: anonify-dev-pgx
        tags: latest
        dockerfile: ./docker/base-anonify-dev-pgx.Dockerfile
        buildContext: .
    - task: Docker@2
      displayName: Push anonify-dev-pgx image
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: anonify-dev-pgx
        tags: latest
        dockerfile: ./docker/base-anonify-dev-pgx.Dockerfile
        buildContext: .

#     - script: docker image prune -f
#       displayName: Remove dangling images

- stage: Build_and_Push_Example_Docker
  # condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - job: Docker
    pool:
      name: 'AnonifyAgent'
    steps:
    # - task: Docker@2
    #   displayName: Build erc20 image
    #   inputs:
    #     command: build
    #     containerRegistry: anonify-ci-cd-acr
    #     repository: erc20-state-runtime
    #     tags: latest
    #     dockerfile: ./docker/example-erc20.Dockerfile
    #     buildContext: .
    #     arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
    # - task: Docker@2
    #   displayName: Push erc20 image
    #   inputs:
    #     command: push
    #     containerRegistry: anonify-ci-cd-acr
    #     repository: erc20-state-runtime
    #     tags: latest
    #     dockerfile: ./docker/example-erc20.Dockerfile
    #     buildContext: .

    # - task: Docker@2
    #   displayName: Build key-vault for erc20 image
    #   inputs:
    #     command: build
    #     containerRegistry: anonify-ci-cd-acr
    #     repository: key-vault-for-erc20
    #     tags: latest
    #     dockerfile: ./docker/example-keyvault.Dockerfile
    #     buildContext: .
    #     arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
    # - task: Docker@2
    #   displayName: Push key-vault for erc20 image
    #   inputs:
    #     command: push
    #     containerRegistry: anonify-ci-cd-acr
    #     repository: key-vault-for-erc20
    #     tags: latest
    #     dockerfile: ./docker/example-keyvault.Dockerfile
    #     buildContext: .

    - task: Docker@2
      displayName: Build encrypted-sql-ops-pg image
      inputs:
        command: build
        containerRegistry: anonify-ci-cd-acr
        repository: encrypted-sql-ops-pg
        tags: latest
        dockerfile: ./docker/example-encrypted-sql-ops-pg.Dockerfile
        buildContext: .
        arguments: '--build-arg AZ_KV_ENDPOINT=$(AZ_KV_ENDPOINT) --build-arg AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) --build-arg AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) --build-arg AZURE_TENANT_ID=$(AZURE_TENANT_ID) --build-arg PROD_ID=$(PROD_ID) --build-arg ISVSVN=$(ISVSVN)'
    - task: Docker@2
      displayName: Push encrypted-sql-ops-pg image
      inputs:
        command: push
        containerRegistry: anonify-ci-cd-acr
        repository: encrypted-sql-ops-pg
        tags: latest
        dockerfile: ./docker/example-encrypted-sql-ops-pg.Dockerfile
        buildContext: .

    - script: docker image prune -f
      displayName: Remove dangling images
